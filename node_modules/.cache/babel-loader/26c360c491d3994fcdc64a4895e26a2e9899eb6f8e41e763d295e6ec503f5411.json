{"ast":null,"code":"var _jsxFileName = \"/Users/uxay/Documents/shader-training/wavy-images/wavey/src/App.js\";\nimport * as THREE from \"three\";\nimport React, { useRef, Suspense } from \"react\";\nimport { Canvas, extend, useFrame, useLoader } from \"@react-three/fiber\";\nimport { shaderMaterial } from \"@react-three/drei\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WaveyShaderMaterial = shaderMaterial(\n// Uniform\n{\n  uTime: 0,\n  uColor: new THREE.Color(0.0, 0.0, 0.0),\n  uTexture: new THREE.Texture()\n}, // Vertex Shader\n\"\\n    precision mediump float;\\n \\n    varying vec2 vUv;\\n    varying float vWave;\\n\\n    uniform float uTime;\\n\\n    //\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_3585124354(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_3585124354(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_3585124354(vec4 x) {\\n     return mod289_3585124354(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt_3585124354(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise3(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D_3585124354 = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_3585124354 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_3585124354;\\n  vec3 i1 = min( g_3585124354.xyz, l.zxy );\\n  vec3 i2 = max( g_3585124354.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D_3585124354.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_3585124354(i);\\n  vec4 p = permute_3585124354( permute_3585124354( permute_3585124354(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D_3585124354.wyz - D_3585124354.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1_3585124354 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0_3585124354 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1_3585124354.xy,h.z);\\n  vec3 p3 = vec3(a1_3585124354.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt_3585124354(vec4(dot(p0_3585124354,p0_3585124354), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0_3585124354 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0_3585124354,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n    void main() {\\n      vUv = uv;\\n\\n      vec3 pos = position;\\n      float noiseFreq = 2.0;\\n      float noiseAmp = 0.4;\\n      vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\\n      pos.z += snoise3(noisePos) * noiseAmp;\\n      vWave = pos.z;\\n\\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);  \\n    }\\n  \", // Fragment Shader\n\"\\n    precision mediump float;\\n\\n    uniform vec3 uColor;\\n    uniform float uTime;\\n    uniform sampler2D uTexture;\\n\\n    varying vec2 vUv;\\n    varying float vWave;\\n\\n    void main() {\\n      float wave = vWave * 0.2;\\n      vec3 texture = texture2D(uTexture, vUv + wave).rgb;\\n      gl_FragColor = vec4(texture, 1.0); \\n    }\\n  \");\nextend({\n  WaveyShaderMaterial\n});\nconst Scene = () => {\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: [/*#__PURE__*/_jsxDEV(\"pointLight\", {\n      position: [10, 100, 100]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n        args: [3, 5]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"waveyShaderMaterial\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 10\n  }, this);\n};\n_c = Scene;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Scene, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 10\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Scene\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["THREE","React","useRef","Suspense","Canvas","extend","useFrame","useLoader","shaderMaterial","jsxDEV","_jsxDEV","WaveyShaderMaterial","uTime","uColor","Color","uTexture","Texture","Scene","children","position","fileName","_jsxFileName","lineNumber","columnNumber","args","_c","App","_c2","$RefreshReg$"],"sources":["/Users/uxay/Documents/shader-training/wavy-images/wavey/src/App.js"],"sourcesContent":["import * as THREE from \"three\";\nimport React, { useRef, Suspense } from \"react\";\nimport { Canvas, extend, useFrame, useLoader } from \"@react-three/fiber\";\nimport { shaderMaterial } from \"@react-three/drei\";\nimport glsl from \"babel-plugin-glsl/macro\";\n\nimport './App.css';\n\nconst WaveyShaderMaterial = shaderMaterial (\n  // Uniform\n  {\n    uTime: 0,\n    uColor: new THREE.Color(0.0, 0.0, 0.0),\n    uTexture: new THREE.Texture()\n  },\n  // Vertex Shader\n  glsl`\n    precision mediump float;\n \n    varying vec2 vUv;\n    varying float vWave;\n\n    uniform float uTime;\n\n    #pragma glslify: snoise3 = require(glsl-noise/simplex/3d.glsl);\n\n    void main() {\n      vUv = uv;\n\n      vec3 pos = position;\n      float noiseFreq = 2.0;\n      float noiseAmp = 0.4;\n      vec3 noisePos = vec3(pos.x * noiseFreq + uTime, pos.y, pos.z);\n      pos.z += snoise3(noisePos) * noiseAmp;\n      vWave = pos.z;\n\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);  \n    }\n  `,\n  // Fragment Shader\n  glsl`\n    precision mediump float;\n\n    uniform vec3 uColor;\n    uniform float uTime;\n    uniform sampler2D uTexture;\n\n    varying vec2 vUv;\n    varying float vWave;\n\n    void main() {\n      float wave = vWave * 0.2;\n      vec3 texture = texture2D(uTexture, vUv + wave).rgb;\n      gl_FragColor = vec4(texture, 1.0); \n    }\n  `\n);\n\nextend({ WaveyShaderMaterial });\n\nconst Scene = () => {\n  return <Canvas>\n    <pointLight position={[10,100,100]} />\n    <mesh>\n      <planeBufferGeometry args={[3, 5]} />\n      <waveyShaderMaterial />\n    </mesh>\n  </Canvas>\n};\n\nconst App = () => {\n  return <Scene />\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB;AACxE,SAASC,cAAc,QAAQ,mBAAmB;AAGlD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,mBAAmB,GAAGH,cAAc;AACxC;AACA;EACEI,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE,IAAIb,KAAK,CAACc,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACtCC,QAAQ,EAAE,IAAIf,KAAK,CAACgB,OAAO,CAAC;AAC9B,CAAC,EACD;AAAA,+nHAwBA;AAAA,iVAiBF,CAAC;AAEDX,MAAM,CAAC;EAAEM;AAAoB,CAAC,CAAC;AAE/B,MAAMM,KAAK,GAAGA,CAAA,KAAM;EAClB,oBAAOP,OAAA,CAACN,MAAM;IAAAc,QAAA,gBACZR,OAAA;MAAYS,QAAQ,EAAE,CAAC,EAAE,EAAC,GAAG,EAAC,GAAG;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtCb,OAAA;MAAAQ,QAAA,gBACER,OAAA;QAAqBc,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;MAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrCb,OAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AACX,CAAC;AAACE,EAAA,GARIR,KAAK;AAUX,MAAMS,GAAG,GAAGA,CAAA,KAAM;EAChB,oBAAOhB,OAAA,CAACO,KAAK;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClB,CAAC;AAACI,GAAA,GAFID,GAAG;AAIT,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}